// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/resume_repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/resume_repository.go -destination=internal/repository/mocks/mock_resume_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	models "CVMatch/internal/models"
	repository "CVMatch/internal/repository"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockResumeRepositoryI is a mock of ResumeRepositoryI interface.
type MockResumeRepositoryI struct {
	ctrl     *gomock.Controller
	recorder *MockResumeRepositoryIMockRecorder
	isgomock struct{}
}

// MockResumeRepositoryIMockRecorder is the mock recorder for MockResumeRepositoryI.
type MockResumeRepositoryIMockRecorder struct {
	mock *MockResumeRepositoryI
}

// NewMockResumeRepositoryI creates a new mock instance.
func NewMockResumeRepositoryI(ctrl *gomock.Controller) *MockResumeRepositoryI {
	mock := &MockResumeRepositoryI{ctrl: ctrl}
	mock.recorder = &MockResumeRepositoryIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResumeRepositoryI) EXPECT() *MockResumeRepositoryIMockRecorder {
	return m.recorder
}

// AssociateSkills mocks base method.
func (m *MockResumeRepositoryI) AssociateSkills(resume *models.Resume, skills []*models.Skill) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateSkills", resume, skills)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssociateSkills indicates an expected call of AssociateSkills.
func (mr *MockResumeRepositoryIMockRecorder) AssociateSkills(resume, skills any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateSkills", reflect.TypeOf((*MockResumeRepositoryI)(nil).AssociateSkills), resume, skills)
}

// Create mocks base method.
func (m *MockResumeRepositoryI) Create(resume *models.Resume) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", resume)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockResumeRepositoryIMockRecorder) Create(resume any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockResumeRepositoryI)(nil).Create), resume)
}

// CreateFile mocks base method.
func (m *MockResumeRepositoryI) CreateFile(file *models.ResumeFile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFile", file)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFile indicates an expected call of CreateFile.
func (mr *MockResumeRepositoryIMockRecorder) CreateFile(file any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockResumeRepositoryI)(nil).CreateFile), file)
}

// DB mocks base method.
func (m *MockResumeRepositoryI) DB() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DB")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// DB indicates an expected call of DB.
func (mr *MockResumeRepositoryIMockRecorder) DB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DB", reflect.TypeOf((*MockResumeRepositoryI)(nil).DB))
}

// DeleteResume mocks base method.
func (m *MockResumeRepositoryI) DeleteResume(resumeID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResume", resumeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResume indicates an expected call of DeleteResume.
func (mr *MockResumeRepositoryIMockRecorder) DeleteResume(resumeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResume", reflect.TypeOf((*MockResumeRepositoryI)(nil).DeleteResume), resumeID)
}

// DeleteResumeFile mocks base method.
func (m *MockResumeRepositoryI) DeleteResumeFile(resumeID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResumeFile", resumeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResumeFile indicates an expected call of DeleteResumeFile.
func (mr *MockResumeRepositoryIMockRecorder) DeleteResumeFile(resumeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResumeFile", reflect.TypeOf((*MockResumeRepositoryI)(nil).DeleteResumeFile), resumeID)
}

// DeleteSkillFromResume mocks base method.
func (m *MockResumeRepositoryI) DeleteSkillFromResume(resumeID, skillID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSkillFromResume", resumeID, skillID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSkillFromResume indicates an expected call of DeleteSkillFromResume.
func (mr *MockResumeRepositoryIMockRecorder) DeleteSkillFromResume(resumeID, skillID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSkillFromResume", reflect.TypeOf((*MockResumeRepositoryI)(nil).DeleteSkillFromResume), resumeID, skillID)
}

// DeleteUnusedEdAndEx mocks base method.
func (m *MockResumeRepositoryI) DeleteUnusedEdAndEx(resumeID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUnusedEdAndEx", resumeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUnusedEdAndEx indicates an expected call of DeleteUnusedEdAndEx.
func (mr *MockResumeRepositoryIMockRecorder) DeleteUnusedEdAndEx(resumeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUnusedEdAndEx", reflect.TypeOf((*MockResumeRepositoryI)(nil).DeleteUnusedEdAndEx), resumeID)
}

// DeleteUnusedMatching mocks base method.
func (m *MockResumeRepositoryI) DeleteUnusedMatching(resumeID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUnusedMatching", resumeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUnusedMatching indicates an expected call of DeleteUnusedMatching.
func (mr *MockResumeRepositoryIMockRecorder) DeleteUnusedMatching(resumeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUnusedMatching", reflect.TypeOf((*MockResumeRepositoryI)(nil).DeleteUnusedMatching), resumeID)
}

// DeleteUnusedSkill mocks base method.
func (m *MockResumeRepositoryI) DeleteUnusedSkill(skillID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUnusedSkill", skillID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUnusedSkill indicates an expected call of DeleteUnusedSkill.
func (mr *MockResumeRepositoryIMockRecorder) DeleteUnusedSkill(skillID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUnusedSkill", reflect.TypeOf((*MockResumeRepositoryI)(nil).DeleteUnusedSkill), skillID)
}

// FirstOrCreateSkill mocks base method.
func (m *MockResumeRepositoryI) FirstOrCreateSkill(name string) (*models.Skill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FirstOrCreateSkill", name)
	ret0, _ := ret[0].(*models.Skill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FirstOrCreateSkill indicates an expected call of FirstOrCreateSkill.
func (mr *MockResumeRepositoryIMockRecorder) FirstOrCreateSkill(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstOrCreateSkill", reflect.TypeOf((*MockResumeRepositoryI)(nil).FirstOrCreateSkill), name)
}

// GetListRes mocks base method.
func (m *MockResumeRepositoryI) GetListRes(userID uuid.UUID) (*[]models.Resume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListRes", userID)
	ret0, _ := ret[0].(*[]models.Resume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListRes indicates an expected call of GetListRes.
func (mr *MockResumeRepositoryIMockRecorder) GetListRes(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListRes", reflect.TypeOf((*MockResumeRepositoryI)(nil).GetListRes), userID)
}

// GetResFileURL mocks base method.
func (m *MockResumeRepositoryI) GetResFileURL(id uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResFileURL", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResFileURL indicates an expected call of GetResFileURL.
func (mr *MockResumeRepositoryIMockRecorder) GetResFileURL(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResFileURL", reflect.TypeOf((*MockResumeRepositoryI)(nil).GetResFileURL), id)
}

// GetResumeByID mocks base method.
func (m *MockResumeRepositoryI) GetResumeByID(userID, resumeID uuid.UUID) (*models.Resume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResumeByID", userID, resumeID)
	ret0, _ := ret[0].(*models.Resume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResumeByID indicates an expected call of GetResumeByID.
func (mr *MockResumeRepositoryIMockRecorder) GetResumeByID(userID, resumeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResumeByID", reflect.TypeOf((*MockResumeRepositoryI)(nil).GetResumeByID), userID, resumeID)
}

// GetSkillsByResumeID mocks base method.
func (m *MockResumeRepositoryI) GetSkillsByResumeID(resumeID uuid.UUID) ([]*models.Skill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSkillsByResumeID", resumeID)
	ret0, _ := ret[0].([]*models.Skill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSkillsByResumeID indicates an expected call of GetSkillsByResumeID.
func (mr *MockResumeRepositoryIMockRecorder) GetSkillsByResumeID(resumeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSkillsByResumeID", reflect.TypeOf((*MockResumeRepositoryI)(nil).GetSkillsByResumeID), resumeID)
}

// WithTx mocks base method.
func (m *MockResumeRepositoryI) WithTx(tx *gorm.DB) repository.ResumeRepositoryI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", tx)
	ret0, _ := ret[0].(repository.ResumeRepositoryI)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockResumeRepositoryIMockRecorder) WithTx(tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockResumeRepositoryI)(nil).WithTx), tx)
}
