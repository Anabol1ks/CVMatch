// Code generated by MockGen. DO NOT EDIT.
// Source: internal/parser/parser.go
//
// Generated by this command:
//
//	mockgen -source=internal/parser/parser.go -destination=internal/parser/mocks/mock_resume_parser.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	config "CVMatch/internal/config"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockResumeParserI is a mock of ResumeParserI interface.
type MockResumeParserI struct {
	ctrl     *gomock.Controller
	recorder *MockResumeParserIMockRecorder
	isgomock struct{}
}

// MockResumeParserIMockRecorder is the mock recorder for MockResumeParserI.
type MockResumeParserIMockRecorder struct {
	mock *MockResumeParserI
}

// NewMockResumeParserI creates a new mock instance.
func NewMockResumeParserI(ctrl *gomock.Controller) *MockResumeParserI {
	mock := &MockResumeParserI{ctrl: ctrl}
	mock.recorder = &MockResumeParserIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResumeParserI) EXPECT() *MockResumeParserIMockRecorder {
	return m.recorder
}

// ParseResume mocks base method.
func (m *MockResumeParserI) ParseResume(path string, cfg *config.Config) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseResume", path, cfg)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseResume indicates an expected call of ParseResume.
func (mr *MockResumeParserIMockRecorder) ParseResume(path, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseResume", reflect.TypeOf((*MockResumeParserI)(nil).ParseResume), path, cfg)
}
